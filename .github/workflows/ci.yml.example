name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: nkripta_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      stripe-mock:
        image: stripe/stripe-mock:latest
        ports:
          - 12111:12111
          - 12112:12112
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create test environment
      run: |
        cp .env.example .env.test
        # Configurar variables de entorno para pruebas
        echo "DB_HOST=localhost" >> .env.test
        echo "DB_PORT=5432" >> .env.test
        echo "DB_NAME=nkripta_test" >> .env.test
        echo "DB_USER=postgres" >> .env.test
        echo "DB_PASSWORD=postgres" >> .env.test
        echo "STRIPE_MOCK_ENABLED=true" >> .env.test
        echo "TEST_MODE=full" >> .env.test
        echo "JWT_SECRET=test-secret-key" >> .env.test
        
        # Configurar variables de entorno de Cognito para pruebas
        echo "COGNITO_USER_POOL_ID=local_00000000" >> .env.test
        echo "COGNITO_CLIENT_ID=local_cognito_client" >> .env.test
        echo "COGNITO_REGION=us-east-1" >> .env.test
    
    - name: Run tests and generate reports
      run: |
        mkdir -p test-reports
        npm run test:all-reports
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: test-reports/
    
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: always()
      with:
        report_paths: 'test-reports/junit.xml'
        check_name: 'Test Results'
        fail_on_failure: true

  # Ejemplo de job de despliegue que solo se ejecuta si las pruebas pasan
  deploy:
    needs: test
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Deploy to production
      run: echo "Aquí irían los comandos para desplegar a producción"