#!/usr/bin/env node

/**
 * Script para generar datos de demostraci√≥n realistas para Nkripta
 * 
 * Este script crea:
 * - 3 organizaciones de demostraci√≥n
 * - 3-4 usuarios por organizaci√≥n
 * - Suscripciones a planes de 9.99‚Ç¨ y 29.99‚Ç¨
 */

require('dotenv').config();
const { sequelize } = require('../src/config/database');
const Organization = require('../src/models/organization');
const Profile = require('../src/models/profile');
const Subscription = require('../src/models/subscription');
const { v4: uuidv4 } = require('uuid');
const bcrypt = require('bcryptjs');

// Reemplazar chalk con funciones simples de console.log para compatibilidad
const log = {
  blue: (text) => console.log('\x1b[34m%s\x1b[0m', text),
  green: (text) => console.log('\x1b[32m%s\x1b[0m', text),
  yellow: (text) => console.log('\x1b[33m%s\x1b[0m', text),
  red: (text) => console.log('\x1b[31m%s\x1b[0m', text),
  cyan: (text) => console.log('\x1b[36m%s\x1b[0m', text)
};

// Configuraci√≥n
const PLANS = {
  BASIC: {
    id: 'plan_basic',
    name: 'Plan B√°sico',
    price: 9.99,
    currency: 'EUR',
    interval: 'month'
  },
  PREMIUM: {
    id: 'plan_premium',
    name: 'Plan Premium',
    price: 29.99,
    currency: 'EUR',
    interval: 'month'
  }
};

// Datos para las organizaciones de ejemplo
const DEMO_ORGANIZATIONS = [
  {
    name: 'TechSolutions Inc.',
    description: 'Empresa l√≠der en soluciones tecnol√≥gicas empresariales',
    slug: 'techsolutions',
    website: 'https://techsolutions-demo.com',
    phone: '+34 912 345 678',
    email: 'info@techsolutions-demo.com'
  },
  {
    name: 'InnovaDesign',
    description: 'Estudio de dise√±o e innovaci√≥n creativa',
    slug: 'innovadesign',
    website: 'https://innovadesign-demo.com',
    phone: '+34 913 456 789',
    email: 'contacto@innovadesign-demo.com'
  },
  {
    name: 'Global Health Services',
    description: 'Servicios de salud y bienestar corporativo',
    slug: 'globalhealth',
    website: 'https://globalhealth-demo.com',
    phone: '+34 914 567 890',
    email: 'info@globalhealth-demo.com'
  }
];

// Datos para los usuarios de ejemplo
const DEMO_USERS = [
  // TechSolutions Inc.
  [
    {
      firstName: 'Carlos',
      lastName: 'Mart√≠nez',
      position: 'CEO',
      email: 'carlos.martinez@techsolutions-demo.com',
      phone: '+34 600 123 456',
      roles: ['ADMIN', 'USER'],
      plan: PLANS.PREMIUM
    },
    {
      firstName: 'Laura',
      lastName: 'Garc√≠a',
      position: 'CTO',
      email: 'laura.garcia@techsolutions-demo.com',
      phone: '+34 600 234 567',
      roles: ['ADMIN', 'USER'],
      plan: PLANS.PREMIUM
    },
    {
      firstName: 'Javier',
      lastName: 'L√≥pez',
      position: 'Desarrollador Senior',
      email: 'javier.lopez@techsolutions-demo.com',
      phone: '+34 600 345 678',
      roles: ['USER'],
      plan: PLANS.BASIC
    },
    {
      firstName: 'Elena',
      lastName: 'S√°nchez',
      position: 'Dise√±adora UX/UI',
      email: 'elena.sanchez@techsolutions-demo.com',
      phone: '+34 600 456 789',
      roles: ['USER'],
      plan: PLANS.BASIC
    }
  ],
  // InnovaDesign
  [
    {
      firstName: 'Miguel',
      lastName: 'Fern√°ndez',
      position: 'Director Creativo',
      email: 'miguel.fernandez@innovadesign-demo.com',
      phone: '+34 601 234 567',
      roles: ['ADMIN', 'USER'],
      plan: PLANS.PREMIUM
    },
    {
      firstName: 'Ana',
      lastName: 'Rodr√≠guez',
      position: 'Directora de Arte',
      email: 'ana.rodriguez@innovadesign-demo.com',
      phone: '+34 601 345 678',
      roles: ['ADMIN', 'USER'],
      plan: PLANS.PREMIUM
    },
    {
      firstName: 'Pablo',
      lastName: 'G√≥mez',
      position: 'Dise√±ador Gr√°fico',
      email: 'pablo.gomez@innovadesign-demo.com',
      phone: '+34 601 456 789',
      roles: ['USER'],
      plan: PLANS.BASIC
    }
  ],
  // Global Health Services
  [
    {
      firstName: 'Isabel',
      lastName: 'Torres',
      position: 'Directora General',
      email: 'isabel.torres@globalhealth-demo.com',
      phone: '+34 602 123 456',
      roles: ['ADMIN', 'USER'],
      plan: PLANS.PREMIUM
    },
    {
      firstName: 'Daniel',
      lastName: 'Moreno',
      position: 'Director M√©dico',
      email: 'daniel.moreno@globalhealth-demo.com',
      phone: '+34 602 234 567',
      roles: ['ADMIN', 'USER'],
      plan: PLANS.PREMIUM
    },
    {
      firstName: 'Sara',
      lastName: 'Jim√©nez',
      position: 'Coordinadora de Servicios',
      email: 'sara.jimenez@globalhealth-demo.com',
      phone: '+34 602 345 678',
      roles: ['USER'],
      plan: PLANS.BASIC
    },
    {
      firstName: 'Rub√©n',
      lastName: 'Castro',
      position: 'Especialista en Marketing',
      email: 'ruben.castro@globalhealth-demo.com',
      phone: '+34 602 456 789',
      roles: ['USER'],
      plan: PLANS.BASIC
    }
  ]
];

// Funci√≥n para generar un ID de suscripci√≥n de Stripe ficticio
function generateFakeStripeSubscriptionId() {
  return `sub_${Math.random().toString(36).substring(2, 15)}`;
}

// Funci√≥n para generar un ID de cliente de Stripe ficticio
function generateFakeStripeCustomerId() {
  return `cus_${Math.random().toString(36).substring(2, 15)}`;
}

// Funci√≥n principal para generar datos
async function generateDemoData() {
  try {
    log.blue('üöÄ Iniciando generaci√≥n de datos de demostraci√≥n para Nkripta');
    
    // Comprobar conexi√≥n a la base de datos
    await sequelize.authenticate();
    log.green('‚úÖ Conexi√≥n a la base de datos establecida');
    
    // Sincronizar base de datos para asegurar que existen las tablas
    log.yellow('üîÑ Sincronizando modelos con base de datos...');
    try {
      // Sincronizar todo el esquema
      await sequelize.sync({ alter: true });
      
      // Sincronizar cada modelo individualmente para asegurar
      await Organization.sync({ alter: true });
      await Profile.sync({ alter: true });
      await Subscription.sync({ alter: true });
      
      log.green('‚úÖ Modelos sincronizados con la base de datos');
    } catch (syncError) {
      log.yellow('‚ö†Ô∏è Error al sincronizar algunos modelos: ' + syncError.message);
      console.error(syncError);
    }
    
    // Limpiar datos existentes
    log.yellow('üßπ Limpiando datos existentes...');
    try {
      await Subscription.destroy({ where: {} });
      await Profile.destroy({ where: {} });
      await Organization.destroy({ where: {} });
      log.green('‚úÖ Datos existentes eliminados correctamente');
    } catch (cleanError) {
      log.yellow('‚ö†Ô∏è Error al limpiar datos existentes, continuando con la creaci√≥n...');
      console.error(cleanError);
    }
    
    // Crear organizaciones
    const organizations = [];
    log.blue('\nüìä Creando organizaciones...');
    
    for (const orgData of DEMO_ORGANIZATIONS) {
      const organization = await Organization.create({
        ...orgData,
        id: uuidv4()
      });
      
      organizations.push(organization);
      log.green(`‚úÖ Organizaci√≥n creada: ${organization.name} (${organization.id})`);
    }
    
    // Crear perfiles y suscripciones
    log.blue('\nüë• Creando perfiles y suscripciones...');
    
    for (let i = 0; i < organizations.length; i++) {
      const organization = organizations[i];
      const usersData = DEMO_USERS[i];
      
      log.yellow(`\nüè¢ Organizaci√≥n: ${organization.name}`);
      
      for (const userData of usersData) {
        // Crear perfil
        const profileId = uuidv4();
        const profile = await Profile.create({
          ...userData,
          id: profileId,
          organizationId: organization.id,
          stripeCustomerId: generateFakeStripeCustomerId(),
          cognitoUsername: uuidv4(),
          sub: uuidv4()
        });
        
        log.green(`  ‚úÖ Perfil creado: ${profile.firstName} ${profile.lastName} (${profile.email})`);
        
        // Crear suscripci√≥n
        const now = new Date();
        const endDate = new Date();
        endDate.setMonth(endDate.getMonth() + 1);
        
        const subscription = await Subscription.create({
          id: uuidv4(),
          stripeSubscriptionId: generateFakeStripeSubscriptionId(),
          profileId: profile.id,
          organizationId: organization.id,
          planType: userData.plan.id,
          status: 'active',
          currentPeriodStart: now,
          currentPeriodEnd: endDate,
          cancelAtPeriodEnd: false,
          createdAt: now,
          updatedAt: now
        });
        
        log.cyan(`    üí∞ Suscripci√≥n creada: ${userData.plan.name} (${userData.plan.price}‚Ç¨)`);
      }
    }
    
    // Estad√≠sticas finales
    const organizationCount = await Organization.count();
    const profileCount = await Profile.count();
    const subscriptionCount = await Subscription.count();
    
    log.blue('\nüìà Estad√≠sticas de datos generados:');
    log.yellow(`  üè¢ Organizaciones: ${organizationCount}`);
    log.yellow(`  üë• Perfiles: ${profileCount}`);
    log.yellow(`  üí∞ Suscripciones: ${subscriptionCount}`);
    
    log.green('\n‚úÖ Datos de demostraci√≥n generados correctamente');
    
    // Cerrar conexi√≥n
    await sequelize.close();
    
  } catch (error) {
    console.error('\x1b[31m%s\x1b[0m', '‚ùå Error al generar datos de demostraci√≥n:');
    console.error(error);
    
    // Cerrar conexi√≥n en caso de error
    try {
      await sequelize.close();
    } catch (closeError) {
      console.error('\x1b[31m%s\x1b[0m', 'Error adicional al cerrar la conexi√≥n:', closeError);
    }
    
    process.exit(1);
  }
}

// Ejecutar la funci√≥n principal
generateDemoData();